"""
Pin Header Connector Component

A configurable pin header component that supports:
- Single and dual row configurations (1-40 pins per row)
- Multiple pitch options: 1.27mm, 2.00mm, 2.54mm (standard)
- Through-hole orientations: Vertical and Horizontal
- SMD orientations: Vertical_SMD (dual row), Vertical_SMD_Pin1Left, Vertical_SMD_Pin1Right (single row)
- Dynamic pin generation based on configuration

Example usage:
    PinHeader = Module("generics/PinHeader.zen")

    # Through-hole dual row
    PinHeader(
        name = "J1",
        pins = 5,
        rows = 2,
        pitch = "2.54mm",
        orientation = "Vertical",
        Pin_1 = Net("VCC"),
        Pin_2 = Net("GND"),
        # ... up to Pin_10 for 2x5 configuration
    )

    # SMD single row
    PinHeader(
        name = "J2",
        pins = 4,
        rows = 1,
        pitch = "2.54mm",
        orientation = "Vertical_SMD_Pin1Left",
        Pin_1 = Net("SDA"),
        # ... up to Pin_4
    )
"""

load("../config.zen", "config_properties")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

Pitch = enum(
    "1.27mm",  # 1.27mm pitch
    "2.00mm",  # 2.00mm pitch
    "2.54mm",  # 2.54mm pitch (standard)
)

Orientation = enum(
    "Vertical",  # Vertical through-hole
    "Horizontal",  # Horizontal through-hole
    "Vertical_SMD",  # Vertical SMD (dual row only)
    "Vertical_SMD_Pin1Left",  # Vertical SMD with Pin 1 on left (single row)
    "Vertical_SMD_Pin1Right",  # Vertical SMD with Pin 1 on right (single row)
)

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

# Required
pins = config("pins", int, default=1)
rows = config("rows", int, default=1)
pitch = config("pitch", Pitch, default=Pitch("2.54mm"))
orientation = config("orientation", Orientation, default=Orientation("Vertical"))

# Properties â€“ combined and normalized
properties = config_properties(
    {
        "value": " ",
        "pins": pins,
        "rows": rows,
        "pitch": pitch,
        "orientation": orientation,
        "connector_type": "Pin Header",
    }
)

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

# Generate IO ports dynamically based on pin count
io_ports = {}
for i in range(1, pins * rows + 1):
    io_ports["Pin_" + str(i)] = io("Pin_" + str(i), Net)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------


def _footprint(pins: int, rows: int, pitch: Pitch, orientation: Orientation):
    """Returns the appropriate PinHeader footprint based on parameters."""

    # Validate parameters
    if pins < 1 or pins > 40:
        error("Invalid pin count: " + str(pins) + ". Must be between 1 and 40.")
    if rows not in [1, 2]:
        error("Invalid row count: " + str(rows) + ". Must be 1 or 2.")

    # Validate SMD orientation combinations
    orientation_str = orientation.value
    if rows == 1 and orientation_str == "Vertical_SMD":
        error(
            "Vertical_SMD orientation is only valid for dual row (rows=2) pin headers. Use Vertical_SMD_Pin1Left or Vertical_SMD_Pin1Right for single row."
        )
    if rows == 2 and (orientation_str == "Vertical_SMD_Pin1Left" or orientation_str == "Vertical_SMD_Pin1Right"):
        error(
            "Vertical_SMD_Pin1Left and Vertical_SMD_Pin1Right orientations are only valid for single row (rows=1) pin headers. Use Vertical_SMD for dual row."
        )

    # Build footprint name
    pitch_str = pitch.value

    # Format pin count with leading zero if needed
    pin_str = str(pins) if pins >= 10 else "0" + str(pins)

    # Build the footprint name
    if rows == 1:
        footprint_name = "PinHeader_1x" + pin_str + "_P" + pitch_str + "_" + orientation_str
    else:
        footprint_name = "PinHeader_2x" + pin_str + "_P" + pitch_str + "_" + orientation_str

    # Construct the file path
    return "@kicad-footprints/Connector_PinHeader_" + pitch_str + ".pretty/" + footprint_name + ".kicad_mod"


def _symbol(pins: int, rows: int):
    """Returns the appropriate generic connector symbol based on pin configuration."""

    # Format pin count with leading zero if needed
    pin_str = str(pins) if pins >= 10 else "0" + str(pins)

    if rows == 1:
        symbol_name = "Conn_01x" + pin_str
    else:
        # For 2x1 connectors, the _Odd_Even suffix is not used
        if pins == 1:
            symbol_name = "Conn_02x" + pin_str
        else:
            symbol_name = "Conn_02x" + pin_str + "_Odd_Even"

    return {
        "library": "@kicad-symbols/Connector_Generic.kicad_sym",
        "name": symbol_name,
    }


# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name="PH",
    symbol=Symbol(**_symbol(pins, rows)),
    footprint=File(_footprint(pins, rows, pitch, orientation)),
    prefix="J",
    pins=io_ports,
    properties=properties,
)
