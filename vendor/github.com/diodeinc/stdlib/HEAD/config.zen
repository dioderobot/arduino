load("units.zen", "unit")
load("utils.zen", "format_value")


def config_unit(name, UnitType, optional=False, default=None, **kwargs):
    """Helper function to create a config value for a unit type.

    Args:
        name (str): The name of the configuration value.
        UnitType (Any): The unit type of the configuration value.
        optional (bool): Whether the configuration value is optional.
        default (UnitType): The default value of the configuration value.
        **kwargs: Additional keyword arguments.

    Returns:
        config: The configuration value.
    """
    unit_type = UnitType | None if optional else UnitType
    default = default or (None if optional else UnitType(value=0.0))

    def convert_unit(x):
        if x == None:
            return None
        return unit(x, UnitType)

    return config(name, unit_type, default=default, convert=convert_unit, optional=optional, **kwargs)


def config_properties(
    properties: dict | None,
    exclude_from_bom: bool | None = None,
    do_not_populate: bool | None = None,
    exclude_from_pos_files: bool | None = None,
) -> dict:
    """Generate component properties with automatic Value field generation.

    This function merges component-specific properties with generic properties
    (mpn, do_not_populate, exclude_from_bom) and automatically generates a
    meaningful Value field for the component.

    The Value field generation follows these rules:
    1. If an MPN (manufacturer part number) is provided, it becomes the Value
    2. Otherwise, the Value is constructed by concatenating all non-metadata
       properties with spaces

    Args:
        properties: Component-specific properties (e.g., capacitance, voltage,
            package). Keys are normalized to capitalize the first letter.
        exclude_from_bom: Whether to exclude the component from the BOM.
        do_not_populate: Whether to not populate the component in the schematic.
        exclude_from_pos_files: Whether to exclude the component from the POS files.

    Returns:
        dict: Complete property dictionary with normalized keys and generated
        Value field, ready for use in Component definition.
    """

    # Helper to normalize and add properties
    def add_property(result, key, value):
        if value == None:
            return
        key = format_value(key).lower().capitalize()
        result[key] = format_value(value)
        # For lists/arrays or records, add structured versions for tooling
        if type(value) == "list" or type(value) == "record":
            result["__" + key.lower() + "__"] = value

    # Get configuration values
    user_properties = config("user_properties", dict, default={}, optional=True)
    mpn = config("mpn", str, optional=True)
    do_not_populate = do_not_populate or config("do_not_populate", bool, optional=True)
    exclude_from_bom = exclude_from_bom or config("exclude_from_bom", bool, optional=True)
    exclude_from_pos_files = (
        exclude_from_pos_files or config("exclude_from_pos_files", bool, optional=True) or exclude_from_bom
    )

    # Build result dictionary
    result = {}

    # Add base properties first
    if properties:
        for key, value in properties.items():
            add_property(result, key, value)

    # Add configuration properties
    add_property(result, "mpn", mpn)
    add_property(result, "do_not_populate", do_not_populate)
    add_property(result, "exclude_from_bom", exclude_from_bom)
    add_property(result, "exclude_from_pos_files", exclude_from_pos_files)

    # Add user properties (these override others)
    if user_properties:
        for key, value in user_properties.items():
            add_property(result, key, value)

    # If Mpn is set, use it as Value
    mpn_val = result.get("Mpn", "")
    if mpn_val:
        result["Value"] = mpn_val

    # If Value is not set, generate it from the other properties
    if not result.get("Value", None):
        # Metadata keys to exclude from Value generation
        META_KEYS = ["Mpn", "Do_not_populate", "Exclude_from_bom", "Exclude_from_pos_files", "Value", "Alternatives"]
        value_parts = []
        for k, v in result.items():
            if k not in META_KEYS and not k.startswith("__") and v:
                value_parts.append(v)
        result["Value"] = " ".join(value_parts)

    return result
